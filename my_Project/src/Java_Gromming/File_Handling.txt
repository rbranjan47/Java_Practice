                                              File Handling
                                              -------------
** A file is a container that is used to Store various types of information.
** Data is permanently stored in secondary memory by creating a file with a unique name.

** CRUD operations:
    a. Creation of a new File
    b. Opening an existing file
    c. Reading from file
    d. Writing to a file
    e. Moving to a specific location in a file
    f. Closing a file
    
    
    
** Various Methods:
   ----------------
   1. writeBytes(String s)  -----> writes the string to the file as sequence of bytes
   2. readLine()  -----> Reads the next line of text from the file
   3. getFilePointer()  -----> return the current offset in the file
   4. length()  -----> return the length of the file
   5. close()  -----> closes this random access file stream and releases any system
   6. setLength(long newLength)  -----> Sets the length of this file
   7. seek(long pos)  -----> Sets the file-pointer offset, measured from the beginning, from which rad and write occurs.    
 
** File Opening modes in JAVA:
------------------------------
   "r"    open for reading only, IOException when try to write
   "rw"   open to reading and Writing. 
   "rws"  open for reading and writing, and also updates to FILE CONTENT or METADATA to be written synchronously 
   "rwd" same as rws but it not update metadata.
   

** RandomAccessFile:
   ----------------
   
   File file = new File("filename");
   RandomAccess raf = new RandomAccessFile(file, mode);
   
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      
                                                   InputStream
                                                    -----------

** InputStream class is the superclass of all the io classes i.e. Representing an input stream of bytes.

** A reset() method is invoked which re-positions the Stream to the recently marked positions.

** public abstract class InputStream extends Object implements Closeable.

* Constructor:
  -----------
 InputStream()

* Methods:
  -------
  a. mark()  -----> Java.io.InputStream.mark(int arg) -----> marks the current postion
  b. read()  -----> reads the next byte of data from the input stream. Return value range from 0 to 255
  c. close()  -----> closes the input Stream and Releases the System associated with this Stream to Garbage Collector
  d. reset()  -----> reposition the input stream to the marked position
  e. markSupported()  -----> return true if Stream Support mark() and reset() method
  f. skip()  -----> Skips bytes if Exception occurs
  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      

                                                   OutputStream
                                                   -----------  
                                                   
** OutputStream abstract classes representing an output stream of bytes.
** An Output accepts output bytes and send then to some sink.


** Constructor:
  -------------
     OutputStream()   
     
** Methods:
   --------
   
   1. void close()  -----> closes the output stream and releases resources associated with the Stream.
   2. void flush()  -----> flushes the output stream and forces any buffered output bytes to be written out.
   3. void write(byte[] b)  -----> writes b.length bytes from specified byte array to this output stream.
   4. void write(byte[] b, int offSet, int length)  -----> Writes length bytes from the Specified byte array starting offset off to this output stream.
   5. abstract void write(int b)  -----> Writes the specified byte to this output stream.
   
   
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>      
                                                     FilterOutputStream
                                                     ------------------




