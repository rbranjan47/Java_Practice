Collection:
-----------
a. Collection is an interface present in the java.util package and it extends ITERABLE interface
b. It is used to represent the group of individuals Object as a single unit.
c. List, Set and Queue are the main sub-interface of the collection interface.


Some Important methods of Collection Interface like,
add(), remove(), clear(), size() and contains()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

Collections:
------------
a. Collections is a utility class present in the Java.util package
b. It defines several utility methods like sorting(), searching()
c. it has all static methods, and these methods provide much convenience to the developers.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

                                  Iterator and Iterable Interface
                                  -------------------------------
Iterator is used to retrive the elements from the collection framework one by one.

a. Implement the Iterable interface 
b. create an iterator class which implements iterator interface and corresponding methods.

It has 3 methdods:
i. hasNext()
ii. next()
iii. remove()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

                                              List
                                              ----
List provide Ordered collection, where duplicates are allowed.
It is a child interface of Collection.
NULL is also stored in the List, with its many times duplicates.

Representation: public abstract interface List extends Collection


ArrayList, LinkedList, Stack, Queue extends the List Interface

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                   
                                             ArrayList
                                             ---------
* ArrayList, is a class which is implemented in the collection framework provides us dynamic arrays in Java.
* Maintain Insertion order
* Synchronized
* Allows random access, but works at Index.

** Where Increment capacity, (3n/2)  

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

                                           LinkedList
                                           ----------
* Insertion Order
* non-Synchronized
* Not, randow access and connected with DATA-STRUCTURE DOUBLE LINKED LIST
   i.e. if we can't replace data member from another data member
   
 **Linked List commons methods:
 1. addFirst()
 2. addLast()
 3. getFirst()
 4. getLast()
 5. removeFirst()
 6. removeLast()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>


                                             Stack
                                             -----
* Legacy class, it was from Collection
* Based on Last-in-First-Out(LIFO)
* Implements Serializable, Clonable, Iterable, List, Collection, Random Access.

* methods like, 
a. empty()
b. search()
c. peek(), return value of top index
d. push
e. pop

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

                                             Vector
                                             ------
* Legacy class & Synchronized
* Implements GROWABLE array of objects
* found in the JAVA.UTIL package, implements LIST interface
* Implements marker interface likes, Serializable, Cloneable, and RandomAcess.

public class Vector<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, Serializable


It have 4 constructor:

a. Vector<E> v = new Vector<E>();
b. Vector<E> v = new Vector<E>(int size);
c. Vector<E> v = new Vector<E>(int size, int increment_size);
d. Vector<E> v = new Vector<E>(Collection c);


Where Increment capacity, 2n 

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

                                          toArray() method
                                          ----------------
** toArray() method used to fom array of the elements in the collections.

** Exceptions we are getting, due to toArray method,
  ArrayStoreException
  NullPointerException
  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

                                                Queue Interface
                                                ---------------
** Queue interface present in the java.util package extends the collection interface.
** Elements processed in FIFO(First in First Out) order.
** Linked List maintains the Insertion Order

** Through LinkedList Object and refrences, we can access complete functionality of QUEUE, DEQUEUE and LIST.
     Like addfirst, addlast, removefirst, removelast.....

** Methods for Queue,
   1. boolean add(object)---- Used to Insert the Specified element into Queue and return true or false
   2. boolean offer(object)---- Insert the Specified element into Queue
   3. Object remove()---- Retrieves and removes the head/top of the Queue
   4. Object poll()---- Retrieves and removes the head/top of the Queue and return NULL when QUEUE is empty
   5. Object element()---- Retrives but do not remove top the Queue
   6. Object peek()---- Retrives but do not remove and not return NULL if Queue is empty
   
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
   
                                                  Priority Queue
                                                  --------------
** Implements QUEUE Interface and marker interface like Serlizable.  
** It doen't allows NULL. 
** We CAN'T create an Priority Queue Object that are NON-COMPARABLE.
    i.e. Object of priority Queue must be cmparable.

** Since, priority Queue is NOT thread-safe, so it is also implementing PriorityBlockingQueue class
           to use in multi-threading.
           
           
**** It has 6 constructors,

 1. PriorityQueue<E> pq = new PriorityQueue<E>();
 
 2. PriorityQueue<E> pq = new PriorityQueue<E>(Collection<E> c);
 
 3. PriorityQueue<E> pq = new PriorityQueue<E>(int initialCapacity);
 
 4. PriorityQueue<E> pq = new PriorityQueue(int initialCapacity, Comparator<E> comparator);
 
 5. PriorityQueue<E> pq = new PriorityQueue(PriorityQueue<E> c);
 
 6. PriorityQueue<E> pq = new PriorityQueue<E>(SortedSet<E> c);
 
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 
                                                    Comparator Interface
                                                    --------------------
** Comparator interface, where we can compare two Object by creating overriding methods.
** It have 2 methods,
      a. compareTo
      b. equals
 
 >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
           
                                                  DeQue Interface
                                                  ------------------
  ** Deque present in the Java.util package is a sub-type of QUEUE interface.
  ** DOUBLE-ENDED queue, which helps to ADDITIONS/REMOVAL elements from both end of the data-structure.
  ** Using as FIFO(First-in-first-out) or as STACK(LIFO).
  
  Declarations:                                             
                public interface Deque extends Queue
                
**Methods for Deque,
   1. boolean add(object)---- Used to Insert the Specified element into Queue and return true or false
   2. boolean offer(object)---- Insert the Specified element into Queue
   3. Object remove()---- Retrieves and removes the head/top of the Queue
   4. Object poll()---- Retrieves and removes the head/top of the Queue and return NULL when QUEUE is empty
   5. Object element()---- Retrives but do not remove top the Queue
   6. Object peek()
   7. booleanaddFirst()......
   
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  
                                                    Array-DeQue
                                                    -----------
** Resizable Array, no capacity restrictions
** Not THREAD-SAFE
** NULL not allowed
** ArrayDeque is faster than STACK when used as Stack
** ArrauDeque is faster than LinkedList when used a queue.


**** It has 3 Constructor:
    1. ArrayDeque<E> dq = new ArrayDeque<E>();
    2. ArrayDeque<E> dq = new ArrayDeque<E>(Collection col);
    3. ArrayDeque<E> dq = new ArrayDeque<E>(int numofElements);
    
    
**** Methods for Deque:
    1. add()
    2. addFirst()
    3. addLast()
    4. offer()
    5. offerFirst()
    6. offerLast()
    7. getFirst()
    8. getLast()
    9. peek()
   10. peekFirst()
   11. peekLast()
   12. remove()
   13. removeFirst()
   14. removeLast()
   15. poll()
   16. pollFirst()
   17. pollLast()
   18. pop()
    
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
  
                                                    Set Interface
                                                    -------------

** Set Interface present in the java.util package and extends the collection interface.
** Does not maintains Insertion order and not allows duplicates.

** Two Interface which extend the Set Implementation are:
    a. SortedSet
    b. NavigableSet
    
   ---> public interface Set extends Collection
                                                     
     ** Operations on Set Interface:
       a. intersection   --- returns common elements from the Set's ---> retainAll()
       b. union  --- returns all the elements in both Set's ---> addAll()
       c. difference --- returns difference between the Set's ---> removeAll()
       
** List Interface methods also in Set Interface.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 
                                                       HashSet
                                                       -------
                                                       
** HashSet class implements the Set Interface
** Data structure is Hashtable
** Duplicates not allowed
** Doesnot maintain Insertion order
** NULL is allowed but only once, as duplicates not allowed
** Implements Marker Interface like Serializable and cloneable.


** we can make it Synchronized, by
            Set s = Collection.synchronizedSet(new HashSet(.......));
            
** 4 Constrcutors:
       a. HashSet<E> hs = new HashSet<E>();
       b. HashSet<E> hs = new HashSet<E>(int init_capacity);
       c. HashSet<E> hs = new HashSet<E>(int init_capacity, float load_factor);
       d. HashSet<E> hs = new HashSet<E>(Collection c);
                                                    
** Load Factor = Stored Elements / Size of the hash table ;

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

                                                        Linked HashSet
                                                        --------------

** Maintains the Insertion order
** Maintains doubly-linked list across the iteration
** Implements marker interface like serializable, cloneable

 --> public class LinkedHashSet<E> extends HashSet<E> implements Set<E>, Cloneable, Serializable
 
** 4 Constrcutors:
       a. LinkedHashSet<E> hs = new LinkedHashSet<E>();
       b. LinkedHashSet<E> hs = new LinkedHashSet<E>(int init_capacity);
       c. LinkedHashSet<E> hs = new LinkedHashSet<E>(int init_capacity, float load_factor);
       d. LinkedHashSet<E> hs = new LinkedHashSet<E>(Collection c);  
       
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
      
                                                        Sorted Set Interface
                                                        --------------------   
**   Set <------ SortedSet <------ NavigableSet <------ TreeSet

**  public interface SortedSet extends Set
** All elements get's Sorted automatically
** All the elements of a sorted Set must implements COMPARABLE INTERFACE.


    SortedSet<Object> srt = new TreeSet<Object>();
    
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                           Navigable Set
                                                           -------------
** implementing the navigable set.
** Behaves like SortedSet, but we have navigable methods avilable in the Sorted Set.
** A navigableSet nay be accessed and transversed in either ascending or Descending order.
 
 
** TREESET implements the navigable Set.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                                TreeSet
                                                                -------
** implementations of SortedSet Interface.
** implements the NavigableSet Interface and AbstractSet Class
** Objects are sorted and Showing in the ASCENDING order
** Doesn't maintain Insertion Order
** Doesn't accept Heterogenous Objects
** Doesn't allows NULL, otherwise throws NullPointerException


* Constructors of TreeSet Class:
  ------------------------------
                 a. TreeSet ts = new TreeSet();
                 b. TreeSet ts = new TreeSet(Comparator comp);
                 c. TreeSet ts = new TreeSet(Collection c);
                 d. TreeSet ts = new TreeSet(Sorted s);

** Methods in TreeSet:
  -------------------
   1. add(Object o)  -------> add the specified element
   2. addAll(Colletion c)  -------> add the elementts of the collection
   3. ceiling(Element e)  -------> returns the least element in the Set or NULL if there is no such element
   4. clear()  -------> remove all the elements
   5. clone()  -------> copy of the Set
   6. Comparator comparator()  -------> return the Compartor used to Sort the TreeSet element
   7. contains(Object o)  -------> return TRUE if the elements
   8. descendingIterator()  -------> returns an iterator over the elements in this set in descending order
   9. descendingSet()  -------> returns an iterator over the elements in this set in descending order
  10. first()  -------> return FIRST element of the Tree Set
  11. floor()  -------> return Greatest Element in the Tree Set
  12. headSet(Object toElement)  -------> returns the elemets of TreeSet, less than Specified Elements
  13. higher(Element e)  -------> return least element, strictly greater than element or NULL 
  14. isEmpty() 
  15. Iterator iterator()
  16. last()  -------> return last element of the TreeSet
  17. lower(Element e)  -------> return Greatest elementin the Set, strictly less than the given elements
  18. pollFirst()  -------> removes first(lowest) element
  19. pollLast()  -------> removes last(highest) element
  20. remove(Object o) 
  21. size()
  22. subSet(Object fromElement, Object toElement)  -------> return RANGING fromElement to toElement
  23. tailSet(Object fromElement)  -------> return Elements from Set, which are greater than the specified element


>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                                Map Interface
                                                                -------------

** Map interface present in the JAVA.UTIL package
** It is not extending Collection Interface, So it is different than Collection Interface
                                              
** Conatins Key Vlaue pairs.
** Cannot contain Duplicate Key
** HashMap and LinkedHashMap allows NULL key and value BUT NOT TreeMap

** Map(interface)   <---------------(EXTENDS) SortedMap(interface)
          ^
          |
          |
          |
     (IMPLEMENTS)
    HashMap(class)     & LinkedHashMap(class)
    
**  Commons Methods in MAP Interface:
    ---------------------------------
    1. clear()  ------> clear the mapping elements
    2. containsKey()  ------> return TRUE, if specified element contains key
    3. containsValue(Object)  ------> check whether specified element Object is present or not
    4. entrySet()  ------> used to create a Set out of same elements
    5. equls(Object)  ------> used to check equality
    6. get(Object)  ------> used to get value of mapped by particular key
    7. hashCode()  ------> used to generate the hashcode
    8. isEmpty()  
    9. keySet()  ------> used to get all the key's in the map
   10. put(Object, Object)
   11. putAll(map)
   12. remove(Object)
   13. size()
   14. values()
  
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                          HashMap
                                                          -------
                                                          
** present in the java.util package
** HashMap is similar to HashTable but is UNSYNCHRONIZED
** allows only 1 NULL key

** implements marker interface like Serializable, Cloneable iterfaces.


--------public class HashMap<k, v> extends AbstractMap<k, v> implements Map<k, v> , Serializable, Cloneable--------

** Constructor:
----------------
   a. HasMap<k,v> map = new HashMap<k, v>();
   b. HasMap<k,v> map = new HashMap<k, v>(int intial_capacity);
   c. HasMap<k,v> map = new HashMap<k, v>(int intial_capacity,float load_factor);
   d. HasMap<k,v> map = new HashMap<k, v>(Map map);

   
>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                          HashTable
                                                          ---------

** HashTable class implements hash table, which maps keys to value
** Any non-null object can be used as keys or value

** Similar to HashMap but SYNOCHRONIZED
** Stores key value pairs in hash table
** Key is hashed, Cause indexing based on Hash 
** Don't accept null value
** HashMap doesn't provie ENUMERATIONS, while Hashtable provide not fail-fast Enumerations.

** Constructor:
----------------
   a. Hastable<k,v> map = new Hastable<k, v>();
   b. Hastable<k,v> map = new Hastable<k, v>(int intial_capacity);
   c. Hastable<k,v> map = new Hastable<k, v>(int intial_capacity,float fill_ratio);
   d. Hastable<k,v> map = new Hastable<k, v>(Map map);

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                          LinkedHashMap
                                                          -------------

** Like HashMap, just in order to maintain Order of the Map.
** HashMap provides INSERTION, DELETION but doesnot maintain Insertion order, LinkedHashMap provides the 
   access of the elements.
   
** implements Map interface and extends HashMap class.
** It contains only unique elements
** It have only 1 NULL values and multiple NULL values.
** NON-SYNCHRONIZED



--- public class LinkedHashMap<k, v) extends HashMap<k, v> implements Map<k, v>----
 
 
 ** 5 Constructors:
 ------------------
     a. LinkedHasMap<k,v> map = new LinkedHasMap<k, v>();
     b. LinkedHasMap<k,v> map = new LinkedHasMap<k, v>(int intial_capacity);
     c. LinkedHasMap<k,v> map = new LinkedHasMap<k, v>(int intial_capacity,float load_factor);
     d. LinkedHasMap<k,v> map = new LinkedHasMap<k, v>(Map map);  
     e. LinkedHashMap<k,v> map = new LinkedHashMap<k,v>(int intial_capacity, float fill_ratio, boolean order);
     
** Implementation is very similar to DOUBLY-LINKED LIST.

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                          SortedMap Interface
                                                          -------------------
**  extends Map interface
**  provides a total ordering of its elements
**  Provieds natural ordering or by COMPARATOR, to sort

** NULL, key and value are not accepted

** Sub-Interfaces are CONCURRENTNAVIGABLEMAP<k,v>, NAVIGABLEMAP<k,v>

** Sorted Map is implmented by TREEMAP & CONCURRENTSKIPLISTMAP

**** 
     public interface SortedMap<k,v> extends Map<k,v>
     {
     Comparator comparator();
     SortedMap sub_map(k fromKey, k toKey);
     SortedMap head_map(k toKey);
     k firstKey();
     k lastKey();
     }
     
** Methods in SortedMao Interface:
----------------------------------
    a. comparator()  -----> return ordering the keys or NULL if natural order is there
    b. entrySet()  -----> return the Set view of mapping
    c. firstKey()  -----> return tje first(lowest) key from map
    d. headMap(k toKey)  -----> return the portion of the map, whose value less than Given
    e. keySet()  -----> return set view of key's map
    f. lastKey()  -----> return the last(heighest) key 
    g. subMap(k fromKey, k toKey)  -----> from_Key(inclusive) to to_Key(last to_Key Exclusive)
    h. tailMap(k fromKey)  -----> all keys and values whose value is greater than or equal to
    i. values()  -----> return a Collection of the values in the map
    
    
 ** METHODS INHERITED FROM MAP INTERFACE:
    ------------------------------------
      1. clear()  ------> clear the mapping elements
      2. containsKey()  ------> return TRUE, if specified element contains key
      3. containsValue(Object)  ------> check whether specified element Object is present or not
      4. entrySet()  ------> used to create a Set out of same elements
      5. equls(Object)  ------> used to check equality
      6. get(Object)  ------> used to get value of mapped by particular key
      7. hashCode()  ------> used to generate the hashcode
      8. isEmpty()  
      9. keySet()  ------> used to get all the key's in the map
     10. put(Object, Object)
     11. putAll(map)
     12. remove(Object)
     13. size()
     14. values()

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
                                                          TreeMap Class
                                                          -------------

** TreeMap is used to implement Map interface and NavigableMap, along with the Abstract Class
** Map is sorted by Natural order OR by the comparator provided at the time of MAP Creation

** Not-Synchronized                                                     

** implements Map Interface, NavigableMap, SortedMap
** NULL not accepted, otherwise NULLPOINTER exception

** Doesn't support Entry.setValue() method.






                                                                              